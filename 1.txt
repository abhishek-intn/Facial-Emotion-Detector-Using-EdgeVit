# Real-time Emotion Recognition Webcam Application using EdgeViT_XXS

import cv2
import numpy as np
from PIL import Image
import torchvision.transforms as transforms
import time
import mediapipe as mp

# Emotion labels mapping 
EMOTION_MAP = {
    "angry": 2, "disgust": 1, "fear": 4, "happy": 6,
    "neutral": 3, "sad": 0, "surprise": 5
}

EMOTION_LABELS = {v: k for k, v in EMOTION_MAP.items()}

class EmotionDetector:
    def __init__(self, model_path):
        """Initialize emotion detector with pretrained EdgeViT_XXS model."""
        self.device = torch.device("cpu")
        try:
            self.model = edgevit_xxs(num_classes=7)  
            state_dict = torch.load(model_path, map_location=self.device)
            self.model.load_state_dict(state_dict)  # Load weights
            self.model.to(self.device)
            self.model.eval()

            # === Dynamic quantization for faster CPU inference on Pi ===
            self.model = torch.quantization.quantize_dynamic(
                self.model, {torch.nn.Linear}, dtype=torch.qint8
            )

            print(f"Successfully loaded and quantized model from {model_path}")
        except Exception as e:
            print(f"Error loading model: {e}")

        # MediaPipe face detection
        self.mp_face_detection = mp.solutions.face_detection
        self.face_detection = self.mp_face_detection.FaceDetection(
            model_selection=1,  # Full range detection
            min_detection_confidence=0.5
        )
        
        self.transform = transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.5], std=[0.5])
        ])

    def frequency_transform(self, image):
        if len(image.shape) == 3 and image.shape[-1] == 3:  
            image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        
        image = image.astype(np.float32) / 255.0  
        low_pass = cv2.GaussianBlur(image, (7, 7), 1)
        sobelx = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=3)
        sobely = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=3)
        high_pass = cv2.magnitude(sobelx, sobely)
        high_pass = high_pass / np.max(high_pass) if np.max(high_pass) > 0 else high_pass  
        freq_image = np.stack([image, low_pass, high_pass], axis=-1)
        return freq_image
    
    def detect_face(self, frame):
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        results = self.face_detection.process(frame_rgb)
        
        # === DEBUG PRINT to check if MediaPipe detects any face ===
        print("DEBUG: Face detections:", results.detections)
        
        if not results.detections:
            return None, None
        
        detection = results.detections[0]  # Take first detected face
        bboxC = detection.location_data.relative_bounding_box
        
        h, w, _ = frame.shape
        x = max(0, int(bboxC.xmin * w))
        y = max(0, int(bboxC.ymin * h))
        width = min(int(bboxC.width * w), w - x)
        height = min(int(bboxC.height * h), h - y)
        
        face_region = frame[y:y+height, x:x+width]
        return face_region, (x, y, width, height)
    
    def preprocess_image(self, image):
        freq_image = self.frequency_transform(image)
        freq_image = (freq_image * 255).astype(np.uint8)
        pil_image = Image.fromarray(freq_image)
        tensor_image = self.transform(pil_image)
        tensor_image = tensor_image.unsqueeze(0).to(self.device)
        return tensor_image
    
    def predict_emotion(self, face_image):
        if face_image is None or face_image.size == 0:
            return None, None
        
        with torch.no_grad():
            try:
                tensor_image = self.preprocess_image(face_image)
                outputs = self.model(tensor_image)
                _, predicted = torch.max(outputs, 1)
                probabilities = torch.nn.functional.softmax(outputs, dim=1)[0]
                emotion_idx = predicted.item()
                emotion_name = EMOTION_LABELS[emotion_idx]
                return emotion_name, probabilities.cpu().numpy()
            except Exception as e:
                print(f"Error during prediction: {e}")
                return None, None

def run_webcam_app():
    model_path = 'C:/Users/ABHISHEK K R/Downloads/drive-download-20250503T023042Z-001/edgevit-xxs_finetuned.pth'
    detector = EmotionDetector(model_path)
    
    # === Changed camera index from 1 to 0 for Raspberry Pi ===
    cap = cv2.VideoCapture(0)  
    if not cap.isOpened():
        print("Error: Could not open webcam.")
        return
    
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
    
    fps_counter = 0
    fps_start_time = time.time()
    fps = 0
    
    print("Starting webcam emotion detection. Press 'q' to quit.")
    
    font = cv2.FONT_HERSHEY_SIMPLEX
    line_thickness = 2
    
    while True:
        ret, frame = cap.read()
        if not ret:
            print("Error: Failed to capture image")
            break
        
        display_frame = frame.copy()
        
        fps_counter += 1
        if fps_counter >= 10:
            current_time = time.time()
            fps = fps_counter / (current_time - fps_start_time)
            fps_start_time = current_time
            fps_counter = 0
        
        face_image, face_bbox = detector.detect_face(frame)
        
        if face_image is not None and face_bbox is not None:
            x, y, w, h = face_bbox
            cv2.rectangle(display_frame, (x, y), (x+w, y+h), (0, 255, 0), line_thickness)
            
            emotion, probabilities = detector.predict_emotion(face_image)
            
            if emotion and probabilities is not None:
                text_y_position = max(y - 10, 20)
                cv2.putText(display_frame, f"{emotion.upper()}", (x, text_y_position), font, 0.8, (0, 255, 0), line_thickness)
                
                bar_width = 150
                bar_height = 15
                bar_gap = 5
                bar_x = 10
                bar_y = 40
                
                for i, emotion_name in enumerate(EMOTION_LABELS.values()):
                    emotion_idx = list(EMOTION_LABELS.keys())[i]
                    prob = probabilities[emotion_idx]
                    
                    cv2.putText(display_frame, emotion_name, (bar_x, bar_y + i*(bar_height+bar_gap+10)), font, 0.5, (255, 255, 255), 1)
                    cv2.rectangle(display_frame, (bar_x + 80, bar_y + i*(bar_height+bar_gap+10) - bar_height), (bar_x + 80 + bar_width, bar_y + i*(bar_height+bar_gap+10)), (100, 100, 100), -1)
                    bar_length = int(prob * bar_width)
                    cv2.rectangle(display_frame, (bar_x + 80, bar_y + i*(bar_height+bar_gap+10) - bar_height), (bar_x + 80 + bar_length, bar_y + i*(bar_height+bar_gap+10)), (0, 255, 0), -1)
                    cv2.putText(display_frame, f"{prob*100:.1f}%", (bar_x + 80 + bar_width + 5, bar_y + i*(bar_height+bar_gap+10)), font, 0.5, (255, 255, 255), 1)
                
                freq_face = detector.frequency_transform(face_image)
                freq_face_display = (freq_face * 255).astype(np.uint8)
                freq_face_display = cv2.resize(freq_face_display, (224, 224))
                cv2.imshow("Frequency Transform", freq_face_display)
        else:
            cv2.putText(display_frame, "No face detected", (10, 30), font, 0.8, (0, 0, 255), line_thickness)
        
        cv2.putText(display_frame, f"FPS: {int(fps)}", (display_frame.shape[1]-120, 30), font, 0.7, (0, 0, 255), 2)
        cv2.imshow("Emotion Recognition", display_frame)
        
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    
    cap.release()
    cv2.destroyAllWindows()
    print("Application closed.")

# Run the app
run_webcam_app()